1、set name and email:
	git config --global user.name "xiaokai"
	git config --global user.email "kai.xiao@entstudy.com"

2、将目录变成Git可以管理的仓库
	git init

3、创建readme.txt文件 
	touch readme.txt

4、编辑readme.txt文件
 	vim readme.txt //打开此文件
 	i //输入i 进入编辑模式
 	Esc //编辑结束后 按Esc键退出编辑模式
 	： //输入:
 	 q! //输入 q! 代表不保存退出
 	 ！ //只输入！ 代表 强制退出
 	 q  //只输入q 代表正常退出 前提条件是：打开的文本文件在内容上没有被改动
 	 wq  //输入 wq 代表保存退出
 	 x   //输入 x  代表保存退出
 	 保存退出的最快捷的方法：按了Esc后 直接按shift+zz 或者切换到大写模式下按ZZ

5、将文件添加到仓库
	git add readme.txt
	git add file1.txt file2.txt file3.txt //一次可以添加多个文件

6、将文件提交到仓库
	git commit -m "wrote a readme file"

7、查看仓库当前的状态（哪些文件被修改过了还没有提交等）
	git status

8、查看文件具体修改的内容
	git diff readme.txt

9、显示从最近到最远的提交日志
	git log
	如果嫌输出信息太多 可以在其后加上 --pretty=oneline参数
	git log --pretty=oneline
	git log --pretty=oneline --abbrev-commit

10、回退到上一个版本
	git reset --hard HEAD^
	在Git中用HEAD表示当前版本，上一个版本是HEAD^,上上一个版本是HEAD^^，上100个版本是HEAD~100
	git reset --hard commit_id

11、git记录每一次的命令，查看命令历史，以便确定要回到未来的哪个版本
	git reflog

12、工作区有一个隐藏目录.git,这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage的暂存区，还有Git为我们自动创建的
	第一个分之master，以及指向master的一个指针HEAD。

13、撤销修改
	场景一：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout -- file.
	场景二：不但改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两步
					第一步用命令git reset HEAD file,就回到了场景一，第二步按场景一操作。
	场景三：已经提交修改到版本库时，想要撤销本体提交，使用版本回退命令。

14、删除文件
	新建一个test.txt文件 并将其提交，然后直接在文件管理器中将此文件删除
	现在有两个选择：一是确实从版本库中删除该文件,使用命令： git rm test.txt
																													git commit -m "remove test.txt"

                  二是删除错了，可以将误删的文件恢复到最新版本：git checkout -- test.txt


15、添加远程仓库
	创建SSH Key。
	ssh-keygen -t rsa -C "your email@example.com"
	关联一个远程库
	git remote add origin https://github.com/kkkforever1/StudyGit.git
	关联后，第一次推送master分支的所有内容
	git push -u origin master
	以后本地提交后，推送最新修改
	git push origin master

16、从远程库克隆
	git clone https://github.com/kkkforever1/gitskills.git


17、查看分支
	git branch

18、创建分支
	git branch <name>

19、切换分支
	git checkout <name>

20、创建+切换分支
	git checkout -b <name>

21、合并某分支到当前分支
	git merge <name>

22、删除分支
	git branch -d <name>

23、当Git无法自动合并分支时，就必须首先解决冲突。然后在提交，合并完成。
	查看分支合并图
	git log --graph
	git log --graph --pretty=oneling --abbrev-commit

24、合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，
	能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	git merge --no-ff -m "merge with no-ff" dev


25、修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除。
	当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复bug，修复后
	再 git stash pop 回到工作现场。
	查看储藏起来的工作现场
	git stash list
	恢复工作现场有两种方法：一是用 git stash apply恢复，但是恢复后stash内容并不删除
															需要用 git stash drop 来删除。
													二是用 git stash pop ，恢复的同时把stash内容也删了。

26、开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支
	可以通过 git branch -D <name> 强行删除。

27、查看远程库信息
	 git remote
	 显示更详细的信息
	 git remote -v

28、本地新建的分支如果不推送到远程，对其他人就是不可见的。
	从本地推送分支，使用 git push origin branch-name, 如果推送失败，先用 git pull 抓取远程的新提交。

29、在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name,
	本地分支和远程分支的名称最好一致。

30、建立本地分支和远程分支的关联
	git branch --set-upstream branch-name origin/branch-name
	git branch --set-upstream dev origin/dev

31、从远程抓取使用 git pull ，如果有冲突，要先处理冲突。

32、新建一个标签
	git tag <name>
	git tag v1.0
	git tag v0.9 commit_id

33、可以指定标签信息
	git tag -a <tagname> -m "balabala" commit_id
	git tag -a v0.1 -m "version 0.1 released" 3628164

34、查看所有标签
	git tag

35、查看标签信息
	git show <tagname>
	git show v1.0

36、推送一个本地标签
	git push origin <tagname>
	git push origin v0.1

37、推送全部未推送过的本地标签
	git push origin --tags

38、删除一个本地标签
	git tag -d <tagname>
	git tag -d v0.1

39、删除一个远程标签
	git push origin :refs/tags/<tagname>
	git push origin :refs/tags/v0.1

40、忽略特殊文件
	强制添加某文件
	git add -f App.class
	检查.gitignore中是否有规则写错
	git check-ignore -v App.class

41、配置别名
	git config --global alias.st status
	git config --global alias.co checkout
	git config --global alias.ci commit
	git config --global alias.br branch









